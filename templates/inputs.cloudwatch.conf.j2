# Pull Metric Statistics from Amazon CloudWatch
[[inputs.cloudwatch]]
  ## Amazon Region
  region = "{{ telegraf_inputs_cloudwatch_region|d() }}"

  ## Amazon Credentials
  ## Credentials are loaded in the following order
  ## 1) Assumed credentials via STS if role_arn is specified
  ## 2) explicit credentials from 'access_key' and 'secret_key'
  ## 3) shared profile from 'profile'
  ## 4) environment variables
  ## 5) shared credentials file
  ## 6) EC2 Instance Profile
  {{ '#' if telegraf_inputs_cloudwatch_access_key is not defined }}access_key = "{{ telegraf_inputs_cloudwatch_access_key|d() }}"
  {{ '#' if telegraf_inputs_cloudwatch_secret_key is not defined }}secret_key = "{{ telegraf_inputs_cloudwatch_secret_key|d() }}"
  {{ '#' if telegraf_inputs_cloudwatch_token is not defined }}token = "{{ telegraf_inputs_cloudwatch_token|d() }}"
  {{ '#' if telegraf_inputs_cloudwatch_role_arn is not defined }}role_arn = "{{ telegraf_inputs_cloudwatch_role_arn|d() }}"
  {{ '#' if telegraf_inputs_cloudwatch_profile is not defined }}profile = "{{ telegraf_inputs_cloudwatch_profile|d() }}"
  {{ '#' if telegraf_inputs_cloudwatch_shared_credential_file is not defined }}shared_credential_file = "{{ telegraf_inputs_cloudwatch_shared_credential_file|d() }}"

  ## Endpoint to make request against, the correct endpoint is automatically
  ## determined and this option should only be set if you wish to override the
  ## default.
  ##   ex: endpoint_url = "http://localhost:8000"
  {{ '#' if telegraf_inputs_cloudwatch_endpoint_url is not defined }}endpoint_url = "{{ telegraf_inputs_cloudwatch_endpoint_url|d() }}"

  # The minimum period for Cloudwatch metrics is 1 minute (60s). However not all
  # metrics are made available to the 1 minute period. Some are collected at
  # 3 minute, 5 minute, or larger intervals. See https://aws.amazon.com/cloudwatch/faqs/#monitoring.
  # Note that if a period is configured that is smaller than the minimum for a
  # particular metric, that metric will not be returned by the Cloudwatch API
  # and will not be collected by Telegraf.
  #
  ## Requested CloudWatch aggregation Period (required - must be a multiple of 60s)
  period = "{{ telegraf_inputs_cloudwatch_period|d() }}"

  ## Collection Delay (required - must account for metrics availability via CloudWatch API)
  delay = "{{ telegraf_inputs_cloudwatch_delay|d() }}"

  ## Recommended: use metric 'interval' that is a multiple of 'period' to avoid
  ## gaps or overlap in pulled data
  interval = "{{ telegraf_inputs_cloudwatch_interval|d() }}"

  ## Configure the TTL for the internal cache of metrics.
  {{ '#' if telegraf_inputs_cloudwatch_cache_ttl is not defined }}cache_ttl = "{{ telegraf_inputs_cloudwatch_cache_ttl|d() }}"

  ## Metric Statistic Namespace (required)
  namespace = "{{ telegraf_inputs_cloudwatch_namespace|d() }}"

  ## Maximum requests per second. Note that the global default AWS rate limit is
  ## 50 reqs/sec, so if you define multiple namespaces, these should add up to a
  ## maximum of 50.
  ## See http://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_limits.html
  {{ '#' if telegraf_inputs_cloudwatch_ratelimit is not defined }}ratelimit = {{ telegraf_inputs_cloudwatch_ratelimit|d() }}

  ## Timeout for http requests made by the cloudwatch client.
  {{ '#' if telegraf_inputs_cloudwatch_timeout is not defined }}timeout = "{{ telegraf_inputs_cloudwatch_timeout|d() }}"

  ## Namespace-wide statistic filters. These allow fewer queries to be made to
  ## cloudwatch.
  {{ '#' if telegraf_inputs_cloudwatch_statistic_include is not defined }}statistic_include = [ {% for i in telegraf_inputs_cloudwatch_statistic_include|d([]) %}"{{ i }}"{{ ', ' if not loop.last }}{% endfor %} ]
  {{ '#' if telegraf_inputs_cloudwatch_statistic_exclude is not defined }}statistic_exclude = [ {% for i in telegraf_inputs_cloudwatch_statistic_exclude|d([]) %}"{{ i }}"{{ ', ' if not loop.last }}{% endfor %} ]

  ## Metrics to Pull
  ## Defaults to all Metrics in Namespace if nothing is provided
  ## Refreshes Namespace available metrics every 1h
  #[[inputs.cloudwatch.metrics]]
