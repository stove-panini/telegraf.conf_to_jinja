# Stream and parse log file(s).
[[inputs.logparser]]
  ## Log files to parse.
  ## These accept standard unix glob matching rules, but with the addition of
  ## ** as a "super asterisk". ie:
  ##   /var/log/**.log     -> recursively find all .log files in /var/log
  ##   /var/log/*/*.log    -> find all .log files with a parent dir in /var/log
  ##   /var/log/apache.log -> only tail the apache log file
  files = [ {% for i in telegraf_inputs_logparser_files|d([]) %}"{{ i }}"{{ ', ' if not loop.last else '' }}{% endfor %} ]

  ## Read files that currently exist from the beginning. Files that are created
  ## while telegraf is running (and that match the "files" globs) will always
  ## be read from the beginning.
  from_beginning = {{ telegraf_inputs_logparser_from_beginning|d()|bool|lower }}

  ## Method used to watch for file updates.  Can be either "inotify" or "poll".
  {{ '#' if telegraf_inputs_logparser_watch_method is not defined else '' }}watch_method = "{{ telegraf_inputs_logparser_watch_method|d() }}"

  ## Parse logstash-style "grok" patterns:
  [inputs.logparser.grok]
    ## This is a list of patterns to check the given log file(s) for.
    ## Note that adding patterns here increases processing time. The most
    ## efficient configuration is to have one pattern per logparser.
    ## Other common built-in patterns are:
    ##   %{COMMON_LOG_FORMAT}   (plain apache & nginx access logs)
    ##   %{COMBINED_LOG_FORMAT} (access logs + referrer & agent)
    patterns = [ {% for i in telegraf_inputs_logparser_grok_patterns|d([]) %}"{{ i }}"{{ ', ' if not loop.last else '' }}{% endfor %} ]

    ## Name of the outputted measurement name.
    measurement = "{{ telegraf_inputs_logparser_grok_measurement|d() }}"

    ## Full path(s) to custom pattern files.
    custom_pattern_files = [ {% for i in telegraf_inputs_logparser_grok_custom_pattern_files|d([]) %}"{{ i }}"{{ ', ' if not loop.last else '' }}{% endfor %} ]

    ## Custom patterns can also be defined here. Put one pattern per line.
