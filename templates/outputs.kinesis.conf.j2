# Configuration for the AWS Kinesis output.
[[outputs.kinesis]]
  ## Amazon REGION of kinesis endpoint.
  region = "{{ telegraf_outputs_kinesis_region|d() }}"

  ## Amazon Credentials
  ## Credentials are loaded in the following order
  ## 1) Assumed credentials via STS if role_arn is specified
  ## 2) explicit credentials from 'access_key' and 'secret_key'
  ## 3) shared profile from 'profile'
  ## 4) environment variables
  ## 5) shared credentials file
  ## 6) EC2 Instance Profile
  access_key = "{{ telegraf_outputs_kinesis_access_key|d() }}"
  secret_key = "{{ telegraf_outputs_kinesis_secret_key|d() }}"
  token = "{{ telegraf_outputs_kinesis_token|d() }}"
  role_arn = "{{ telegraf_outputs_kinesis_role_arn|d() }}"
  profile = "{{ telegraf_outputs_kinesis_profile|d() }}"
  shared_credential_file = "{{ telegraf_outputs_kinesis_shared_credential_file|d() }}"

  ## Endpoint to make request against, the correct endpoint is automatically
  ## determined and this option should only be set if you wish to override the
  ## default.
  ##   ex: endpoint_url = "http://localhost:8000"
  {{ '#' if telegraf_outputs_kinesis_endpoint_url is not defined }}endpoint_url = "{{ telegraf_outputs_kinesis_endpoint_url|d() }}"

  ## Kinesis StreamName must exist prior to starting telegraf.
  streamname = "{{ telegraf_outputs_kinesis_streamname|d() }}"
  ## DEPRECATED: PartitionKey as used for sharding data.
  partitionkey = "{{ telegraf_outputs_kinesis_partitionkey|d() }}"
  ## DEPRECATED: If set the partitionKey will be a random UUID on every put.
  ## This allows for scaling across multiple shards in a stream.
  ## This will cause issues with ordering.
  use_random_partitionkey = {{ telegraf_outputs_kinesis_use_random_partitionkey|d()|bool|lower }}
  ## The partition key can be calculated using one of several methods:
  ##
  ## Use a static value for all writes:
  #  [outputs.kinesis.partition]
